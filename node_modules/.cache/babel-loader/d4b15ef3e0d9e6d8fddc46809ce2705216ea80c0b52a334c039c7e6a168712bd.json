{"ast":null,"code":"var _jsxFileName = \"/home/luis/Escritorio/telefonica3/nft_marketplace3/src/frontend/components/Create.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = process.env.REACT_APP_PROJECT_ID;\nconst projectSecretKey = process.env.REACT_APP_PROJECT_KEY;\nconst authorization = \"Basic \" + btoa(projectId + \":\" + projectSecretKey);\nconst client = ipfsHttpClient({\n  url: 'https://ipfs.infura.io:5001/api/v0',\n  headers: {\n    authorization\n  }\n});\nconst Create = _ref => {\n  _s();\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`ipfs://${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n  const mintThenList = async result => {\n    const uri = `ipfs://${result.path}`;\n    console.log(uri);\n    // mint nft \n    await (await nft.mint(uri)).wait();\n    // get tokenId of new nft \n    const id = await nft.tokenCount();\n    // approve marketplace to spend nft\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait();\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","jsxDEV","_jsxDEV","projectId","process","env","REACT_APP_PROJECT_ID","projectSecretKey","REACT_APP_PROJECT_KEY","authorization","btoa","client","url","headers","Create","_ref","_s","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","className","children","role","style","maxWidth","Control","type","required","onChange","fileName","_jsxFileName","lineNumber","columnNumber","e","value","size","placeholder","as","onClick","variant","_c","$RefreshReg$"],"sources":["/home/luis/Escritorio/telefonica3/nft_marketplace3/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\n\n\nconst projectId = process.env.REACT_APP_PROJECT_ID;\nconst projectSecretKey = process.env.REACT_APP_PROJECT_KEY;\nconst authorization = \"Basic \" + btoa(projectId + \":\" + projectSecretKey);\nconst client = ipfsHttpClient({url:'https://ipfs.infura.io:5001/api/v0',\n  headers:{authorization,} \n    ,})\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file)\n        console.log(result)\n        setImage(`ipfs://${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return\n    try{\n      const result = await client.add(JSON.stringify({image, price, name, description}))\n      mintThenList(result)\n    } catch(error) {\n      console.log(\"ipfs uri upload error: \", error)\n    }\n  }\n  const mintThenList = async (result) => {\n    const uri = `ipfs://${result.path}`\n    console.log(uri)\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}